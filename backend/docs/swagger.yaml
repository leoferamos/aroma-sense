basePath: /
definitions:
  dto.AddToCartRequest:
    properties:
      product_id:
        type: integer
      quantity:
        minimum: 1
        type: integer
    required:
    - product_id
    - quantity
    type: object
  dto.CartItemResponse:
    properties:
      cart_id:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      price:
        type: number
      product:
        $ref: '#/definitions/dto.ProductResponse'
      product_id:
        type: integer
      quantity:
        type: integer
      total:
        type: number
      updated_at:
        type: string
    type: object
  dto.CartResponse:
    properties:
      created_at:
        type: string
      id:
        type: integer
      item_count:
        type: integer
      items:
        items:
          $ref: '#/definitions/dto.CartItemResponse'
        type: array
      total:
        type: number
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  dto.CreateUserRequest:
    properties:
      email:
        example: user@example.com
        format: email
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  dto.ErrorResponse:
    properties:
      error:
        example: error message
        type: string
    type: object
  dto.LoginRequest:
    properties:
      email:
        example: user@example.com
        format: email
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.LoginResponse:
    properties:
      message:
        example: Login successful
        type: string
      user:
        $ref: '#/definitions/dto.UserResponse'
    type: object
  dto.MessageResponse:
    properties:
      message:
        example: success message
        type: string
    type: object
  dto.ProductResponse:
    description: Product information returned by the API
    properties:
      brand:
        example: Dior
        type: string
      category:
        example: Eau de Parfum
        type: string
      created_at:
        example: "2025-09-28T10:00:00Z"
        type: string
      description:
        example: A fresh and woody fragrance
        type: string
      id:
        example: 1
        type: integer
      image_url:
        example: https://example.com/image.jpg
        type: string
      name:
        example: Sauvage
        type: string
      notes:
        example: bergamot, pepper, ambroxan
        type: string
      price:
        example: 299.99
        type: number
      stock_quantity:
        example: 50
        type: integer
      updated_at:
        example: "2025-09-28T10:00:00Z"
        type: string
      weight:
        example: 100
        type: number
    type: object
  dto.UpdateCartItemRequest:
    properties:
      quantity:
        minimum: 0
        type: integer
    required:
    - quantity
    type: object
  dto.UpdateProductRequest:
    description: Product update request (all fields are optional)
    properties:
      brand:
        example: Dior
        type: string
      category:
        example: Eau de Parfum
        type: string
      description:
        example: An intense and spicy fragrance
        type: string
      name:
        example: Sauvage Elixir
        type: string
      notes:
        example:
        - cinnamon
        - nutmeg
        - cardamom
        items:
          type: string
        type: array
      price:
        example: 399.99
        type: number
      stock_quantity:
        example: 25
        type: integer
      weight:
        example: 60
        type: number
    type: object
  dto.UserResponse:
    properties:
      created_at:
        example: "2025-09-11T12:00:00Z"
        type: string
      email:
        example: user@example.com
        type: string
      public_id:
        example: uuid
        type: string
      role:
        example: user
        type: string
    type: object
host: localhost:8080
info:
  contact:
    name: API Support
    url: https://github.com/leoferamos/aroma-sense
  description: REST API for user Aroma Sense Eccomerce
  title: Aroma Sense API
  version: "1.0"
paths:
  /admin/products:
    post:
      consumes:
      - multipart/form-data
      description: Creates a new product with image upload (Admin only)
      parameters:
      - description: Bearer JWT token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Product name
        in: formData
        name: name
        required: true
        type: string
      - description: Product brand
        in: formData
        name: brand
        required: true
        type: string
      - description: Product weight in ml
        in: formData
        name: weight
        required: true
        type: number
      - description: Product description
        in: formData
        name: description
        type: string
      - description: Product price
        in: formData
        name: price
        required: true
        type: number
      - description: Product category
        in: formData
        name: category
        required: true
        type: string
      - description: Product notes (fragrance notes)
        in: formData
        name: notes
        required: true
        type: array
      - description: Stock quantity
        in: formData
        name: stock_quantity
        required: true
        type: integer
      - description: Product image
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Product created successfully
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Invalid request data or missing image
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden - Admin only
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new product
      tags:
      - admin
  /admin/products/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes an existing product (Admin only)
      parameters:
      - description: Bearer JWT token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Product deleted successfully
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Invalid product ID
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden - Admin only
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete product
      tags:
      - admin
    get:
      consumes:
      - application/json
      description: Retrieves a specific product by its ID (Admin only)
      parameters:
      - description: Bearer JWT token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Product details
          schema:
            $ref: '#/definitions/dto.ProductResponse'
        "400":
          description: Invalid product ID
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden - Admin only
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get product by ID
      tags:
      - admin
    patch:
      consumes:
      - application/json
      description: Updates an existing product (Admin only)
      parameters:
      - description: Bearer JWT token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Product update data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Product updated successfully
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Invalid product ID or request data
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden - Admin only
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update product
      tags:
      - admin
  /cart:
    delete:
      consumes:
      - application/json
      description: Removes all items from the user's cart, returning an empty cart
      parameters:
      - description: Bearer JWT token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Empty cart after clearing all items
          schema:
            $ref: '#/definitions/dto.CartResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Cart not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Clear cart
      tags:
      - cart
    get:
      consumes:
      - application/json
      description: Retrieves the shopping cart for the authenticated user with items,
        quantities and totals
      parameters:
      - description: Bearer JWT token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User's cart with items and totals
          schema:
            $ref: '#/definitions/dto.CartResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Cart not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get current user's cart
      tags:
      - cart
    post:
      consumes:
      - application/json
      description: Adds a product to the user's shopping cart. If item already exists,
        increases quantity.
      parameters:
      - description: Bearer JWT token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Product ID and quantity to add
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.AddToCartRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated cart with new item
          schema:
            $ref: '#/definitions/dto.CartResponse'
        "400":
          description: Invalid request body or insufficient stock
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "409":
          description: Product out of stock
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Add item to cart
      tags:
      - cart
  /cart/items/{itemId}:
    delete:
      consumes:
      - application/json
      description: Removes a specific item from the user's cart completely
      parameters:
      - description: Bearer JWT token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Cart item ID
        in: path
        name: itemId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Updated cart after item removal
          schema:
            $ref: '#/definitions/dto.CartResponse'
        "400":
          description: Invalid item ID
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Cart item not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Remove item from cart
      tags:
      - cart
    patch:
      consumes:
      - application/json
      description: Updates the quantity of a specific item in the user's cart. If
        quantity is 0, removes the item.
      parameters:
      - description: Bearer JWT token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Cart item ID
        in: path
        name: itemId
        required: true
        type: integer
      - description: New quantity (0 to remove item)
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateCartItemRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated cart
          schema:
            $ref: '#/definitions/dto.CartResponse'
        "400":
          description: Invalid request body, item ID, or insufficient stock
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Cart item or product not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "409":
          description: Product out of stock
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update cart item quantity
      tags:
      - cart
  /products:
    get:
      consumes:
      - application/json
      description: Retrieves a list of the latest products with optional limit (Public
        endpoint)
      parameters:
      - default: 10
        description: Maximum number of products to return
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of latest products
          schema:
            items:
              $ref: '#/definitions/dto.ProductResponse'
            type: array
        "400":
          description: Invalid limit parameter
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: List latest products
      tags:
      - products
  /users/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns a JWT token and user info.
      parameters:
      - description: Login credentials
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Authentication successful
          schema:
            $ref: '#/definitions/dto.LoginResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Login
      tags:
      - auth
  /users/register:
    post:
      consumes:
      - application/json
      description: Creates a new user account with the provided information.
      parameters:
      - description: User registration data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Invalid request (missing fields, invalid email) or email already
            registered
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Register a new user
      tags:
      - auth
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
