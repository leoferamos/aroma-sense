basePath: /
definitions:
  dto.CreateUserRequest:
    properties:
      email:
        example: user@example.com
        format: email
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  dto.ErrorResponse:
    properties:
      error:
        example: error message
        type: string
    type: object
  dto.LoginRequest:
    properties:
      email:
        example: user@example.com
        format: email
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.LoginResponse:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      user:
        $ref: '#/definitions/dto.UserResponse'
    type: object
  dto.MessageResponse:
    properties:
      message:
        example: success message
        type: string
    type: object
  dto.UserResponse:
    properties:
      created_at:
        example: "2025-09-11T12:00:00Z"
        type: string
      email:
        example: user@example.com
        type: string
      public_id:
        example: uuid
        type: string
      role:
        example: user
        type: string
    type: object
host: localhost:8080
info:
  contact:
    name: API Support
    url: https://github.com/leoferamos/aroma-sense
  description: REST API for user Aroma Sense Eccomerce
  title: Aroma Sense API
  version: "1.0"
paths:
  /users/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns a JWT token and user info.
      parameters:
      - description: Login credentials
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Authentication successful
          schema:
            $ref: '#/definitions/dto.LoginResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Login
      tags:
      - auth
  /users/register:
    post:
      consumes:
      - application/json
      description: Creates a new user account with the provided information.
      parameters:
      - description: User registration data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Invalid request (missing fields, invalid email) or email already
            registered
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Register a new user
      tags:
      - auth
swagger: "2.0"
